#include <iostream>
#include <algorithm>
using namespace std;

int N, M;
int maze[1001][1001];
int DP[1001][1001];

void dinamic() {
	DP[1][1] = maze[1][1];
	for (int i = 1; i < N; i++) {
		for (int j = 1; j < M; j++) {
			DP[i][j + 1] = max(DP[i][j + 1], DP[i][j] + maze[i][j + 1]);
			DP[i + 1][j] = max(DP[i + 1][j], DP[i][j] + maze[i + 1][j]);
			DP[i + 1][j + 1] = max(DP[i + 1][j + 1], DP[i][j] + maze[i + 1][j + 1]);
		}
		DP[i + 1][M] = max(DP[i + 1][M], DP[i][M] + maze[i + 1][M]);
	}
	for (int j = 1; j < M; j++)
		DP[N][j + 1] = max(DP[N][j + 1], DP[N][j] + maze[N][j + 1]);
}

int main() {
	cin >> N >> M;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			cin >> maze[i + 1][j + 1];

	dinamic();
	cout << DP[N][M] << endl;
}
